{
    "name": "01-ldap_jenkins",
    "type": "groovy",
    "content": "import groovy.json.JsonOutput\nimport org.sonatype.nexus.ldap.persist.LdapConfigurationManager\nimport org.sonatype.nexus.ldap.persist.entity.Connection\nimport org.sonatype.nexus.ldap.persist.entity.LdapConfiguration\nimport org.sonatype.nexus.ldap.persist.entity.Mapping\nimport org.sonatype.nexus.security.user.UserSearchCriteria\ndef systemPassword = new File('/secrets/ldap_password').text\ndef ldap_url = '__LDAP_URL__'\nldapManager = container.lookup(LdapConfigurationManager.class.name)\nif (!ldapManager.listLdapServerConfigurations().any { it.name == ldap_url }){ldapManager.addLdapServerConfiguration(new LdapConfiguration(name: ldap_url,connection: new Connection(host: new Connection.Host(Connection.Protocol.ldaps, ldap_url, 636),connectionTimeout: 30,connectionRetryDelay: 300,maxIncidentsCount: 3,searchBase: 'dc=jenkins-ci,dc=org',authScheme: 'simple',systemUsername: 'cn=admin,dc=jenkins-ci,dc=org',systemPassword: systemPassword,),mapping: new Mapping(userBaseDn: 'ou=people',userObjectClass: 'inetOrgPerson',ldapFilter: '',userIdAttribute: 'cn',userRealNameAttribute: 'cn',emailAddressAttribute: 'mail',userPasswordAttribute: '',ldapGroupsAsRoles: true,userMemberOfAttribute: '', groupBaseDn: 'ou=groups', groupObjectClass: 'groupOfNames', groupIdAttribute: 'cn', groupMemberAttribute: 'member', groupMemberFormat: 'cn=${username},ou=people,dc=jenkins-ci,dc=org')))}\n// create external role mappings.\nif (!security.securitySystem.listRoles().any { it.roleId == 'Administrators' && it.source == 'default' }){security.addRole('release-core','release-core','Administrator Role (LDAP Administrators)',[],['nx-admin'])\nsecurity.addRole('all','all','Read Only Role (LDAP All)',[],['nx-anonymous'])\nsecurity.addRole('release-core-dev','release-core-dev','Release Role (LDAP release)',['nx-all'],['nx-anonymous'])}\nldapUsers = security.securitySystem.searchUsers(new UserSearchCriteria(source: 'LDAP'))\nreturn JsonOutput.toJson([ldapUsers: ldapUsers.sort { it.userId },ldapGroups: security.securitySystem.listRoles('LDAP').sort { it.roleId },roles: security.securitySystem.listRoles().sort { it.roleId },])"
}

